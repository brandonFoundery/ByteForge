name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Build and Test
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: |
        if [ -d "BackEnd" ]; then
          cd BackEnd
          dotnet restore
        else
          echo "BackEnd directory not found, skipping .NET restore"
        fi
        
    - name: Build backend
      run: |
        if [ -d "BackEnd" ]; then
          cd BackEnd
          dotnet build --no-restore --configuration Release
        else
          echo "BackEnd directory not found, skipping .NET build"
        fi
        
    - name: Run backend tests
      run: |
        if [ -d "BackEnd" ]; then
          cd BackEnd
          dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
        else
          echo "BackEnd directory not found, skipping .NET tests"
        fi
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        directory: ./BackEnd/TestResults
        flags: backend
        name: backend-coverage

  # Frontend Build and Test
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'FrontEnd/package-lock.json'
        
    - name: Install frontend dependencies
      run: |
        if [ -f "FrontEnd/package.json" ]; then
          cd FrontEnd
          npm ci
        else
          echo "FrontEnd/package.json not found, skipping npm install"
        fi
        
    - name: Run ESLint
      run: |
        if [ -f "FrontEnd/package.json" ]; then
          cd FrontEnd
          npm run lint || echo "Lint script not found or failed"
        fi
        
    - name: Run frontend tests
      run: |
        if [ -f "FrontEnd/package.json" ]; then
          cd FrontEnd
          npm test -- --coverage || echo "Test script not found or failed"
        fi
        
    - name: Build frontend
      run: |
        if [ -f "FrontEnd/package.json" ]; then
          cd FrontEnd
          npm run build
        else
          echo "FrontEnd/package.json not found, skipping frontend build"
        fi

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [backend, frontend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Infrastructure Validation
  infrastructure-validate:
    runs-on: ubuntu-latest
    name: Infrastructure Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Docker Compose
      run: |
        if [ -f "docker-compose.yml" ]; then
          docker-compose config
        else
          echo "docker-compose.yml not found"
        fi
        
    - name: Validate Dockerfiles
      run: |
        for dockerfile in Dockerfile.*; do
          if [ -f "$dockerfile" ]; then
            echo "Validating $dockerfile"
            docker run --rm -i hadolint/hadolint < "$dockerfile" || echo "Hadolint issues found in $dockerfile"
          fi
        done

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy to Development
    needs: [docker-build, security-scan, infrastructure-validate]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to development environment
      run: |
        echo "Deploying to development environment..."
        # Add your deployment logic here
        # This could include:
        # - Azure CLI commands
        # - Kubernetes deployments
        # - Docker Compose deployments
        # - Terraform apply
        echo "Development deployment complete"

  # Deploy to Production
  deploy-prod:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [docker-build, security-scan, infrastructure-validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        echo "Production deployment complete"

  # Notification
  notify:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [backend-test, frontend-test, security-scan, docker-build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ CI/CD Pipeline completed successfully"
        # Add Slack/Teams notification here if needed
        
    - name: Notify on failure
      if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ CI/CD Pipeline failed"
        # Add Slack/Teams notification here if needed