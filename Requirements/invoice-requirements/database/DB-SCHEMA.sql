-- Generated by Claude Requirements Engine
-- Document Type: DB-SCHEMA
-- Generated: 2025-06-02T15:55:48.131711
-- Version: 1.0

I'll help create a robust PostgreSQL database schema with all the required components. I'll include detailed comments and organize it logically.

```sql
-- Enable UUID extension for unique identifiers
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create custom types for better data validation
CREATE TYPE user_role AS ENUM ('admin', 'user', 'guest');
CREATE TYPE order_status AS ENUM ('pending', 'processing', 'completed', 'cancelled');

-- Users table
CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    role user_role NOT NULL DEFAULT 'user',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP WITH TIME ZONE,
    is_active BOOLEAN DEFAULT true,
    CONSTRAINT email_format CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- Create index on email for faster lookups
CREATE INDEX idx_users_email ON users(email);

-- Products table
CREATE TABLE products (
    product_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT true,
    CONSTRAINT positive_price CHECK (price >= 0),
    CONSTRAINT positive_stock CHECK (stock_quantity >= 0)
);

-- Create index on product name for search functionality
CREATE INDEX idx_products_name ON products(name);

-- Orders table
CREATE TABLE orders (
    order_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL,
    status order_status NOT NULL DEFAULT 'pending',
    total_amount DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE RESTRICT,
    CONSTRAINT positive_total CHECK (total_amount >= 0)
);

-- Create index on user_id for faster order lookups
CREATE INDEX idx_orders_user_id ON orders(user_id);

-- Order Items table
CREATE TABLE order_items (
    order_item_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    order_id UUID NOT NULL,
    product_id UUID NOT NULL,
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    CONSTRAINT fk_order FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE RESTRICT,
    CONSTRAINT positive_quantity CHECK (quantity > 0),
    CONSTRAINT positive_unit_price CHECK (unit_price >= 0)
);

-- Create composite index for order items
CREATE INDEX idx_order_items_order_product ON order_items(order_id, product_id);

-- Trigger function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_products_updated_at
    BEFORE UPDATE ON products
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_orders_updated_at
    BEFORE UPDATE ON orders
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Sample seed data
INSERT INTO users (email, password_hash, first_name, last_name, role) VALUES
('admin@example.com', '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj2NRlaSL0wu', 'Admin', 'User', 'admin'),
('user@example.com', '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj2NRlaSL0wu', 'Regular', 'User', 'user');

INSERT INTO products (name, description, price, stock_quantity) VALUES
('Product 1', 'Description for product 1', 29.99, 100),
('Product 2', 'Description for product 2', 49.99, 50);

-- Create an order with order items
WITH new_order AS (
    INSERT INTO orders (user_id, status, total_amount)
    SELECT user_id, 'pending', 79.98
    FROM users
    WHERE email = 'user@example.com'
    RETURNING order_id
)
INSERT INTO order_items (order_id, product_id, quantity, unit_price)
SELECT 
    new_order.order_id,
    products.product_id,
    1,
    products.price
FROM new_order, products
WHERE products.name = 'Product 1';
```

This schema includes:

1. **Tables**:
   - Users (for authentication and user management)
   - Products (for product catalog)
   - Orders (for order management)
   - Order Items (for order line items)

2. **Features**:
   - UUID primary keys for security and scalability
   - Appropriate data types and constraints
   - Foreign key relationships with proper deletion rules
   - Check constraints for data validation
   - Indexes for performance optimization
   - Timestamps with automatic updates
   - Enum types for status fields
   - Email format validation
   - Sample seed data

3. **Performance Considerations**:
   - Indexes on frequently queried columns
   - Composite indexes for related queries
   - Proper constraint naming for maintenance

4. **Security Features**:
   - Password hashing (assumed in seed data)
   - Role-based access control
   - Activity tracking with timestamps

This schema is ready for production use with a React/TypeScript frontend and Node.js/Express backend. It includes all necessary constraints and indexes for optimal performance and data integrity.