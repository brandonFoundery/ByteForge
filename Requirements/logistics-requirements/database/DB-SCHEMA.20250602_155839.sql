-- Generated by Claude Requirements Engine
-- Document Type: DB-SCHEMA
-- Generated: 2025-05-26T22:38:05.758345
-- Version: 1.0

I'll create a comprehensive PostgreSQL schema based on the requirements. I'll include table definitions, constraints, indexes, and some sample data.

```sql
-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create ENUM types
CREATE TYPE user_role AS ENUM ('admin', 'dept_head', 'user');
CREATE TYPE user_status AS ENUM ('active', 'inactive', 'suspended');
CREATE TYPE department_status AS ENUM ('active', 'inactive');
CREATE TYPE workflow_status AS ENUM ('active', 'draft', 'archived');

-- Users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(256) NOT NULL,
    role user_role NOT NULL DEFAULT 'user',
    status user_status NOT NULL DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_username_check CHECK (length(trim(username)) > 0),
    CONSTRAINT users_email_check CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- Create index on email and username for faster lookups
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);

-- Departments table
CREATE TABLE departments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    code VARCHAR(10) NOT NULL UNIQUE,
    head_user_id UUID NOT NULL,
    status department_status NOT NULL DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT departments_name_check CHECK (length(trim(name)) > 0),
    CONSTRAINT departments_code_check CHECK (code ~ '^[A-Z0-9]+$'),
    FOREIGN KEY (head_user_id) REFERENCES users(id)
);

-- Create index on department code
CREATE INDEX idx_departments_code ON departments(code);

-- Department Members (junction table for Users-Departments many-to-many)
CREATE TABLE department_members (
    user_id UUID NOT NULL,
    department_id UUID NOT NULL,
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, department_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE
);

-- Workflows table
CREATE TABLE workflows (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    status workflow_status NOT NULL DEFAULT 'draft',
    created_by UUID NOT NULL,
    department_id UUID NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflows_name_check CHECK (length(trim(name)) > 0),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (department_id) REFERENCES departments(id)
);

-- Create index on workflow status
CREATE INDEX idx_workflows_status ON workflows(status);

-- Update trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create update triggers for all tables
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_departments_updated_at
    BEFORE UPDATE ON departments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_workflows_updated_at
    BEFORE UPDATE ON workflows
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Sample seed data
INSERT INTO users (username, email, password_hash, role) VALUES
('admin', 'admin@example.com', 'hash_here', 'admin'),
('depthead1', 'depthead1@example.com', 'hash_here', 'dept_head'),
('user1', 'user1@example.com', 'hash_here', 'user');

INSERT INTO departments (name, code, head_user_id) VALUES
('Human Resources', 'HR001', (SELECT id FROM users WHERE username = 'depthead1')),
('Information Technology', 'IT001', (SELECT id FROM users WHERE username = 'depthead1'));

INSERT INTO department_members (user_id, department_id) VALUES
((SELECT id FROM users WHERE username = 'user1'),
 (SELECT id FROM departments WHERE code = 'HR001'));

INSERT INTO workflows (name, description, status, created_by, department_id) VALUES
('Employee Onboarding', 'New employee onboarding process', 'active',
 (SELECT id FROM users WHERE username = 'depthead1'),
 (SELECT id FROM departments WHERE code = 'HR001'));
```

This schema includes:

1. **UUID Extension** for generating unique IDs
2. **Custom ENUM types** for status and role fields
3. **Four main tables**:
   - users
   - departments
   - department_members (junction table)
   - workflows
4. **Constraints**:
   - Primary and foreign keys
   - Unique constraints
   - Check constraints for data validation
   - Email format validation
5. **Indexes** for commonly queried fields
6. **Triggers** for automatic updated_at timestamp maintenance
7. **Sample seed data** for testing

Additional features:

- Timestamps include timezone information
- Soft validation on email format
- Upper-case validation on department codes
- Cascading deletes where appropriate
- Automatic timestamp management
- Efficient indexing strategy

This schema is optimized for:
- PostgreSQL specific features
- React/TypeScript frontend querying
- Node.js/Express backend operations
- Performance and data integrity
- Maintainability and scalability