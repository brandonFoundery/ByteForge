# Generated by Claude Requirements Engine
# Document Type: API-OPEN
# Generated: 2025-05-26T22:24:05.883254
# Version: 1.0

I'll create a comprehensive OpenAPI 3.0 specification based on the provided requirements. I'll split it into logical sections for better readability.

```yaml
openapi: 3.0.3
info:
  title: Business Application Platform API
  version: 1.0.0
  description: |
    REST API for Business Application Platform supporting user management, 
    workflows, and reporting functionalities.
  contact:
    name: API Support
    email: api-support@business-platform.com
    url: https://docs.business-platform.com
  license:
    name: Proprietary
    url: https://business-platform.com/license

servers:
  - url: https://api.business-platform.com/v1
    description: Production server
  - url: https://staging-api.business-platform.com/v1
    description: Staging server

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: Authentication and authorization endpoints
  - name: Users
    description: User management operations
  - name: Workflows
    description: Workflow management and operations
  - name: Reports
    description: Report generation and management
  - name: Products
    description: Product catalog management
  - name: Orders
    description: Order processing and management

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate user
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      tags:
        - Users
      summary: List users
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: role
          in: query
          schema:
            $ref: '#/components/schemas/UserRole'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
    post:
      tags:
        - Users
      summary: Create new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    UserRole:
      type: string
      enum: [admin, analyst, user]
    
    UserStatus:
      type: string
      enum: [active, inactive, suspended]

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          $ref: '#/components/schemas/UserStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - username
        - role
        - status

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
          enum: [Bearer]
        expiresIn:
          type: integer
        user:
          $ref: '#/components/schemas/User'
      required:
        - accessToken
        - tokenType
        - expiresIn
        - user

    PaginatedUsers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination

    Pagination:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        pages:
          type: integer
      required:
        - total
        - page
        - limit
        - pages

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
      required:
        - code
        - message

  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination
    
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page

  responses:
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
```

This is a partial specification focusing on core authentication and user management. Would you like me to continue with additional paths and schemas for workflows, reports, products, and orders? I can also add more detailed error responses, validation schemas, and examples.

The specification follows OpenAPI 3.0 best practices including:
1. Proper security definitions with JWT
2. Consistent response structures
3. Reusable components and parameters
4. Pagination support
5. Error handling patterns

Let me know if you'd like to see specific additional sections or have any questions about the current specification.