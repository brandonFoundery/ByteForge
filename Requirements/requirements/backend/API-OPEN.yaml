# Generated by Claude Requirements Engine
# Document Type: API-OPEN
# Generated: 2025-06-02T16:01:59.338678
# Version: 1.0

I'll create a comprehensive OpenAPI 3.0 specification based on the provided requirements. I'll break it into logical sections for clarity.

```yaml
openapi: 3.0.3
info:
  title: Business Application Platform API
  version: 1.0.0
  description: |
    REST API for Business Application Platform supporting workflow management, 
    reporting, and user administration.
  contact:
    name: API Support
    email: api-support@business-platform.com
    url: https://docs.business-platform.com
  license:
    name: Proprietary
    url: https://business-platform.com/license

servers:
  - url: https://api.business-platform.com/v1
    description: Production server
  - url: https://staging-api.business-platform.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Local development

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate user and get access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      tags: [Users]
      summary: List all users
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
    post:
      tags: [Users]
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /workflows:
    get:
      tags: [Workflows]
      summary: List all workflows
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/WorkflowStatus'
      responses:
        '200':
          description: List of workflows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWorkflows'
    post:
      tags: [Workflows]
      summary: Create new workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
      responses:
        '201':
          description: Workflow created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
          enum: [Bearer]
        expiresIn:
          type: integer
          format: int32

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          $ref: '#/components/schemas/UserStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserRole:
      type: string
      enum: [admin, analyst, user]

    UserStatus:
      type: string
      enum: [active, inactive, suspended]

    Workflow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
        description:
          type: string
        templateId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/WorkflowStatus'
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    WorkflowStatus:
      type: string
      enum: [draft, active, archived]

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items: {}
        pagination:
          type: object
          properties:
            total:
              type: integer
            page:
              type: integer
            limit:
              type: integer
            pages:
              type: integer

    PaginatedUsers:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'

    PaginatedWorkflows:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Workflow'

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
```

This specification includes:

1. Complete API information with servers and contact details
2. Authentication endpoints with JWT security scheme
3. CRUD operations for Users and Workflows
4. Comprehensive schema definitions
5. Common parameters for pagination
6. Standard error responses
7. Security requirements

Would you like me to add any additional endpoints or expand any particular section?