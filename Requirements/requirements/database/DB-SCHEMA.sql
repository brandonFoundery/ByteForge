-- Generated by Claude Requirements Engine
-- Document Type: DB-SCHEMA
-- Generated: 2025-06-02T16:01:35.294664
-- Version: 1.0

I'll create a comprehensive PostgreSQL schema based on the requirements. I'll include tables, constraints, indexes, and some sample data.

```sql
-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Enums
CREATE TYPE user_role AS ENUM ('admin', 'analyst', 'user');
CREATE TYPE user_status AS ENUM ('active', 'inactive', 'suspended');
CREATE TYPE workflow_status AS ENUM ('draft', 'active', 'archived');

-- Users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) NOT NULL UNIQUE,
    username VARCHAR(50) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    role user_role NOT NULL DEFAULT 'user',
    status user_status NOT NULL DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_email_check CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    CONSTRAINT users_username_check CHECK (username ~* '^[A-Za-z0-9_]{3,50}$')
);

-- Create index on email and username for faster lookups
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);

-- Templates table (referenced by workflows)
CREATE TABLE templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Workflows table
CREATE TABLE workflows (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    template_id UUID NOT NULL REFERENCES templates(id),
    status workflow_status NOT NULL DEFAULT 'draft',
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflows_name_length CHECK (char_length(trim(name)) > 0)
);

-- Create indexes for foreign keys and common queries
CREATE INDEX idx_workflows_template_id ON workflows(template_id);
CREATE INDEX idx_workflows_created_by ON workflows(created_by);
CREATE INDEX idx_workflows_status ON workflows(status);

-- Reports table
CREATE TABLE reports (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(100) NOT NULL,
    description TEXT,
    query_definition JSONB NOT NULL,
    schedule VARCHAR(100), -- CRON string
    created_by UUID NOT NULL REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT reports_title_length CHECK (char_length(trim(title)) > 0),
    CONSTRAINT reports_schedule_check CHECK (schedule ~ '^(\*|[0-9,\-\/]+)\s+(\*|[0-9,\-\/]+)\s+(\*|[0-9,\-\/]+)\s+(\*|[0-9,\-\/]+)\s+(\*|[0-9,\-\/]+)$')
);

-- Create indexes for foreign keys and common queries
CREATE INDEX idx_reports_created_by ON reports(created_by);

-- Report subscriptions (many-to-many relationship between reports and users)
CREATE TABLE report_subscriptions (
    report_id UUID NOT NULL REFERENCES reports(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    subscribed_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (report_id, user_id)
);

-- Create indexes for foreign keys
CREATE INDEX idx_report_subscriptions_report_id ON report_subscriptions(report_id);
CREATE INDEX idx_report_subscriptions_user_id ON report_subscriptions(user_id);

-- Trigger function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_workflows_updated_at
    BEFORE UPDATE ON workflows
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_reports_updated_at
    BEFORE UPDATE ON reports
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Sample seed data
INSERT INTO users (email, username, password_hash, role) VALUES
('admin@example.com', 'admin', '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj2NXFp/XAyW', 'admin'),
('analyst@example.com', 'analyst', '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj2NXFp/XAyW', 'analyst'),
('user@example.com', 'user1', '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj2NXFp/XAyW', 'user');

INSERT INTO templates (name, description) VALUES
('Basic Workflow', 'A basic workflow template'),
('Advanced Workflow', 'An advanced workflow template with additional features');

-- Add indexes for full-text search
CREATE INDEX idx_workflows_text_search ON workflows 
    USING gin(to_tsvector('english', name || ' ' || COALESCE(description, '')));

CREATE INDEX idx_reports_text_search ON reports 
    USING gin(to_tsvector('english', title || ' ' || COALESCE(description, '')));

-- Add permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO app_user;
```

This schema includes:

1. All required tables with appropriate data types
2. Primary and foreign key constraints
3. Check constraints for data validation
4. Indexes for performance optimization
5. Triggers for updated_at timestamp maintenance
6. Full-text search capabilities
7. Enum types for status fields
8. Sample seed data
9. Basic permissions setup

Key features:

- Uses UUID for primary keys
- Implements proper timestamp handling with timezone
- Includes validation for email, username, and cron expressions
- Creates necessary indexes for foreign keys and common queries
- Implements full-text search capabilities
- Includes automated updated_at timestamp management
- Follows PostgreSQL best practices for performance and maintainability

The schema is ready for production use and can be extended as needed. Let me know if you need any clarification or have additional requirements!