#!/usr/bin/env python3
"""
Setup demo data for the Requirements Generation Dashboard
This script copies sample data to the appropriate directories for testing.
"""

import os
import shutil
from pathlib import Path
import json

# Get the directory of this script
SCRIPT_DIR = Path(__file__).parent.absolute()
SAMPLE_DATA_DIR = SCRIPT_DIR / "sample_data"

# Default paths - relative to the project root
PROJECT_ROOT = Path("d:/Repository/@Clients/FY.WB.Midway")
OUTPUT_DIR = PROJECT_ROOT / "generated_documents"
STATUS_DIR = PROJECT_ROOT / "generation_status"

print(f"Script directory: {SCRIPT_DIR}")
print(f"Sample data directory: {SAMPLE_DATA_DIR}")
print(f"Output directory: {OUTPUT_DIR}")
print(f"Status directory: {STATUS_DIR}")

def main():
    """Main entry point"""
    print("Setting up demo data for Requirements Generation Dashboard")
    
    # Create directories if they don't exist
    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    STATUS_DIR.mkdir(parents=True, exist_ok=True)
    
    # Copy status files to status directory
    print("\nCopying status files...")
    for status_file in SAMPLE_DATA_DIR.glob("status_*.json"):
        dest_file = STATUS_DIR / status_file.name
        shutil.copy2(status_file, dest_file)
        print(f"  Copied {status_file.name} to {dest_file}")
    
    # Copy log file to status directory
    log_file = SAMPLE_DATA_DIR / "orchestrator.log"
    if log_file.exists():
        dest_log = STATUS_DIR / "orchestrator.log"
        shutil.copy2(log_file, dest_log)
        print(f"  Copied orchestrator.log to {dest_log}")
    
    # Create dummy document files in output directory
    print("\nCreating dummy document files...")
    for status_file in SAMPLE_DATA_DIR.glob("status_*.json"):
        # Read status file to get document info
        with open(status_file, 'r') as f:
            status_data = json.load(f)
            
        doc_id = status_data.get("id", "")
        doc_title = status_data.get("title", "")
        doc_status = status_data.get("status", "")
        
        # Create dummy markdown file
        doc_file = OUTPUT_DIR / f"{doc_id}.md"
        with open(doc_file, 'w') as f:
            f.write(f"""---
id: {doc_id}
title: {doc_title}
version: 1.0.0
status: {doc_status}
generated_at: {status_data.get("generated_at", "")}
refined_count: {status_data.get("refined_count", 0)}
dependencies: {status_data.get("dependencies", [])}
---

# {doc_title}

This is a sample document for demonstration purposes.

## Overview

This document was generated by the Requirements Generation System.

## Content

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod, nisl eget
aliquam ultricies, nunc nisl aliquet nunc, quis aliquam nisl nunc quis nisl.

## Requirements

1. Requirement 1
2. Requirement 2
3. Requirement 3

""")
        print(f"  Created {doc_file}")
    
    print("\nDemo setup complete!")
    print(f"- Status files in: {STATUS_DIR}")
    print(f"- Document files in: {OUTPUT_DIR}")
    print("\nYou can now run the dashboard with:")
    print("python run_simple.py")

if __name__ == "__main__":
    main()