# docker-compose.yml - Multi-container orchestration for FY.WB.Midway
version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: fy-wb-midway-backend
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=FYWBMidway;User Id=sa;Password=StrongPassword123!;TrustServerCertificate=True;
      - ConnectionStrings__CosmosDB=${COSMOS_CONNECTION_STRING:-}
      - BlobStorage__ConnectionString=${BLOB_STORAGE_CONNECTION_STRING:-}
      - Authentication__JwtSecret=${JWT_SECRET:-development-secret-key-change-in-production}
      - Authentication__JwtExpirationHours=24
    depends_on:
      - sqlserver
    networks:
      - fy-wb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend Web Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: fy-wb-midway-frontend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5002
      - NEXT_PUBLIC_APP_NAME=FY.WB.Midway
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - fy-wb-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: fy-wb-midway-sqlserver
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=StrongPassword123!
      - MSSQL_PID=Developer
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./Infrastructure/database/init:/docker-entrypoint-initdb.d
    networks:
      - fy-wb-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P StrongPassword123! -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Redis Cache (for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: fy-wb-midway-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-development-redis-password}
    volumes:
      - redis_data:/data
    networks:
      - fy-wb-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fy-wb-midway-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./Infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - fy-wb-network
    restart: unless-stopped

volumes:
  # Persistent data volumes
  sqlserver_data:
    driver: local
  redis_data:
    driver: local

networks:
  # Custom network for service communication
  fy-wb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16