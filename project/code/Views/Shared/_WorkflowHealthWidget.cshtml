<div class="workflow-health-widget" id="workflowHealthWidget">
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">
                <i class="bi bi-activity"></i> Workflow Health Monitor
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="health-status" id="healthStatus">
                        <div class="d-flex align-items-center">
                            <div class="status-indicator" id="statusIndicator"></div>
                            <span id="healthText">Loading...</span>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <small class="text-muted">Active Workflows:</small>
                        <span class="badge bg-primary" id="activeCount">-</span>
                    </div>
                    
                    <div class="mt-2">
                        <small class="text-muted">Success Rate (24h):</small>
                        <span class="badge bg-success" id="successRate">-%</span>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="recent-stats">
                        <div class="stat-item">
                            <small class="text-muted">Avg Processing Time:</small>
                            <div id="avgProcessingTime">- seconds</div>
                        </div>
                        
                        <div class="stat-item mt-2">
                            <small class="text-muted">Last Hour:</small>
                            <div>
                                <span id="lastHourTotal">-</span> executions
                                (<span id="lastHourSuccess">-%</span> success)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mt-3">
                <div class="col-12">
                    <div class="workflow-alerts" id="workflowAlerts">
                        <!-- Alerts will be populated here -->
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card-footer text-muted">
            <small>Last updated: <span id="lastUpdated">-</span></small>
            <button class="btn btn-sm btn-outline-primary float-end" id="refreshHealth">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
    </div>
</div>

<style>
    .workflow-health-widget .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }
    
    .workflow-health-widget .status-indicator.healthy {
        background-color: #28a745;
        box-shadow: 0 0 0 2px rgba(40, 167, 69, 0.2);
    }
    
    .workflow-health-widget .status-indicator.unhealthy {
        background-color: #dc3545;
        box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.2);
    }
    
    .workflow-health-widget .status-indicator.unknown {
        background-color: #ffc107;
        box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.2);
    }
    
    .workflow-health-widget .stat-item {
        padding: 4px 0;
    }
    
    .workflow-health-widget .alert {
        margin-bottom: 8px;
    }
    
    .workflow-health-widget .alert:last-child {
        margin-bottom: 0;
    }
</style>

<script>
let workflowHealthRefreshInterval;

function initializeWorkflowHealth() {
    loadWorkflowHealth();
    
    // Set up auto-refresh every 30 seconds
    workflowHealthRefreshInterval = setInterval(loadWorkflowHealth, 30000);
    
    // Manual refresh button
    document.getElementById('refreshHealth').addEventListener('click', loadWorkflowHealth);
}

async function loadWorkflowHealth() {
    try {
        console.log('Loading workflow health...');
        const response = await fetch('/api/WorkflowMonitoringApi/health');
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const health = await response.json();
        console.log('Workflow health loaded:', health);
        
        updateWorkflowHealthDisplay(health);
    } catch (error) {
        console.error('Error loading workflow health:', error);
        showWorkflowError(error.message);
    }
}

function updateWorkflowHealthDisplay(health) {
    const statusIndicator = document.getElementById('statusIndicator');
    const healthText = document.getElementById('healthText');
    const activeCount = document.getElementById('activeCount');
    const successRate = document.getElementById('successRate');
    const avgProcessingTime = document.getElementById('avgProcessingTime');
    const lastHourTotal = document.getElementById('lastHourTotal');
    const lastHourSuccess = document.getElementById('lastHourSuccess');
    const lastUpdated = document.getElementById('lastUpdated');
    const alertsContainer = document.getElementById('workflowAlerts');
    
    // Update health status
    statusIndicator.className = 'status-indicator ' + (health.isHealthy ? 'healthy' : 'unhealthy');
    healthText.textContent = health.isHealthy ? 'Healthy' : 'Issues Detected';
    healthText.className = health.isHealthy ? 'text-success fw-bold' : 'text-danger fw-bold';
    
    // Update metrics
    activeCount.textContent = health.activeWorkflows || 0;
    successRate.textContent = ((health.successRateLast24Hours || 0) * 100).toFixed(1) + '%';
    successRate.className = 'badge ' + (health.successRateLast24Hours >= 0.8 ? 'bg-success' : 'bg-warning');
    
    avgProcessingTime.textContent = (health.averageProcessingTimeSeconds || 0).toFixed(1) + ' seconds';
    
    lastHourTotal.textContent = health.totalExecutionsLastHour || 0;
    const lastHourSuccessRate = ((health.successRateLastHour || 0) * 100).toFixed(1);
    lastHourSuccess.textContent = lastHourSuccessRate + '%';
    
    lastUpdated.textContent = new Date().toLocaleTimeString();
    
    // Update alerts
    let alertsHtml = '';
    
    if (health.stalledWorkflows > 0) {
        alertsHtml += `<div class="alert alert-warning alert-sm">
            <i class="bi bi-exclamation-triangle"></i> ${health.stalledWorkflows} workflow(s) may be stalled
        </div>`;
    }
    
    if (health.successRateLast24Hours < 0.8) {
        alertsHtml += `<div class="alert alert-danger alert-sm">
            <i class="bi bi-exclamation-circle"></i> Low success rate: ${(health.successRateLast24Hours * 100).toFixed(1)}%
        </div>`;
    }
    
    if (health.totalExecutionsLast24Hours === 0) {
        alertsHtml += `<div class="alert alert-info alert-sm">
            <i class="bi bi-info-circle"></i> No workflow executions in last 24 hours
        </div>`;
    }
    
    if (alertsHtml === '' && health.isHealthy) {
        alertsHtml = `<div class="alert alert-success alert-sm">
            <i class="bi bi-check-circle"></i> All workflows operating normally
        </div>`;
    }
    
    alertsContainer.innerHTML = alertsHtml;
}

function showWorkflowError(errorMessage) {
    const statusIndicator = document.getElementById('statusIndicator');
    const healthText = document.getElementById('healthText');
    const alertsContainer = document.getElementById('workflowAlerts');
    
    statusIndicator.className = 'status-indicator unknown';
    healthText.textContent = 'Monitoring Error';
    healthText.className = 'text-warning fw-bold';
    
    alertsContainer.innerHTML = `<div class="alert alert-warning alert-sm">
        <i class="bi bi-exclamation-triangle"></i> Unable to load workflow health: ${errorMessage}
    </div>`;
    
    document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
}

// Cleanup function for when the component is destroyed
function cleanupWorkflowHealth() {
    if (workflowHealthRefreshInterval) {
        clearInterval(workflowHealthRefreshInterval);
    }
}

// Initialize when the DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeWorkflowHealth);
} else {
    initializeWorkflowHealth();
}
</script>